@using Project.Shared.Entities

@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />


    <div class="mb-3">

        <label>Nombre Participante:</label>

        <div>
            <InputText width="10" @bind-Value="Participant.NameParti" />
            <ValidationMessage For="@(() => Participant.NameParti)" />

        </div>

    </div>

    <div class="mb-3">
        <label>Rol Participante:</label>

        <div>
            <InputText width="10" @bind-Value="Participant.RoleParti" />
            <ValidationMessage For="@(() => Participant.RoleParti)" />

        </div>


    </div>

    <div class="mb-3">
        <label>Experiencia Participante:</label>

        <div>
            <InputText width="10" @bind-Value="Participant.ExperienceParti" />
            <ValidationMessage For="@(() => Participant.ExperienceParti)" />

        </div>


    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" onclick="ReturnAction">Regresar</button>

</EditForm>

@code {
    private EditContext editContext = null;

    protected override void OnInitialized()
    {
        editContext = new(Participant);
    }

    [EditorRequired]
    [Parameter]
    public Participant Participant { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
